<==== tail ====>
1. node tail.js a.txt
    Possibilities :> 
        * File contains 10 lines or more than 10 lines.
        * File contains less than 10 lines.
        * File is missing.  

2. node tail.js -n 3 a.txt
    Possibilities :> 
        * File contains N lines or more than N lines
        * File contains less than N lines
        * File is missing
        * Count is invalid

3. cat a.txt | node tail.js
    Possibilities :> 
        * Input contains more than 10 lines
        * Input less than 10 lines. 

4. cat a.txt | node tail.js -n 3
    Possibilities :> 
        * Input contains more than N lines
        * Input less than N lines. 
        * Count is invalid

5. node  tail.js  a.txt  b.txt
    Possibilities :>
        * File contains 10 lines or more than 10 lines.
        * File contains less than 10 lines.
        * Few file is missing.  

6. node -n 3 tail.js  a.txt  b.txt
    Possibilities :>
        * File contains N lines or more than N lines.
        * File contains less than N lines.
        * Few file is missing. 
        * Invalid line number count

black box :
     [a.txt]
     <==tail==>
    2
    3
    4
    5
    6
    7
    8
    9
    10
    11

a.txt :>
    1
    2
    3
    4
    5
    6
    7
    8
    9
    10
    11

[1.1] Last Step
output : text => formattedLines
    2
    3
    4
    5
    6
    7
    8
    9
    10
    11
input : array of text => lastTenLines
    ['2','3','4','5','6','7','8','9','10','11']
name : getFormattedLines(lastTenLines)

[1.2] previous Step
output : array of text => extractedLines
        ['2','3','4','5','6','7','8',9,'10','11']
input  : array of text => allLines , integer => lineCount
        ['1','2','3','4','5','6','7','8',9,'10','11']
name   : give extracted lines 
         getExtractedLines(allLines,lineCount)
    
[1.3]
output : array of text => allLines
        ['1','2','3','4','5','6','7','8',9,'10','11']
input : text => contents
    '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11'
name  : getSplitLines(contents)


========> flow for inputs from file        
[1.4a]
output : text => contents
    '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11'
input  : text => filePath
         'a.txt'
name   : read and give file content
        getFileContents(path)

========> flow for standard input
[1.4b]
output : text => lines
    '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11'
input  : 
name   : gatherUserInput()

[1.5]
output : f() => flow
       getFileContents / gatherUserInput
input  : object => 
        {lineCount : 10, fileNames : ['a.txt']} => single file with line count 10
                    or
        {lineCount : 3,fileNames:[]}              => standard input with lineCount 3
                    or
        {lineCount : 10, fileNames :['a.txt','b.txt']}  => multiple files with lineCount 10
name   : pickMethod(cmdLineArgs)

[1.6]
output : object => integer :lineCount, array of text : fileNames
        {lineCount : 10, fileNames : ['a.txt']}
                    or
        {lineCount : 3}
                    or
        {lineCount : 10, fileNames :['a.txt','b.txt']}
input  : array of text => cmdLineArgs
        ['node','tail.js','a.txt']
                 or
        ['node','tail.js']
name   : parseOptions(cmdLineArgs)





